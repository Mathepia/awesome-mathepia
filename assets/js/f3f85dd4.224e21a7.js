"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6632],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function u(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),m=c(a),h=r,f=m["".concat(l,".").concat(h)]||m[h]||s[h]||i;return a?n.createElement(f,o(o({ref:t},p),{},{components:a})):n.createElement(f,o({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6215:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return s}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],u={sidebar_position:3},l=void 0,c={unversionedId:"AI4Science/Integrals",id:"AI4Science/Integrals",title:"Integrals",description:"Quadrature",source:"@site/docs/AI4Science/Integrals.md",sourceDirName:"AI4Science",slug:"/AI4Science/Integrals",permalink:"/awesome-sciml/docs/AI4Science/Integrals",editUrl:"https://github.com/Mathepia/awesome-sciml/docs/AI4Science/Integrals.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"autodiff",permalink:"/awesome-sciml/docs/AI4Science/autodiff"},next:{title:"HPC",permalink:"/awesome-sciml/docs/AI4Science/HPC"}},p={},s=[{value:"Quadrature",id:"quadrature",level:2},{value:'<span id="head15">Bayesian Methods</span>',id:"bayesian-methods",level:4},{value:'<span id="head16">Expectations calculation</span>',id:"expectations-calculation",level:4}],m={toc:s};function h(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"quadrature"},"Quadrature"),(0,i.kt)("p",null,"Learn One equals learn many"),(0,i.kt)("p",null,"Review",(0,i.kt)("a",{parentName:"p",href:"https://github.com/SciML/Quadrature.jl"},"SciML/Quadrature.jl: A common interface for quadrature and numerical integration for the SciML scientific machine learning organization")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/SciML/QuasiMonteCarlo.jl"},"SciML/QuasiMonteCarlo.jl: Lightweight and easy generation of quasi-Monte Carlo sequences with a ton of different methods on one API for easy parameter exploration in scientific machine learning (SciML)")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/SciML/SymbolicNumericIntegration.jl"},"SciML/SymbolicNumericIntegration.jl")),(0,i.kt)("p",null,"Julia:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaMath/QuadGK.jl"},"JuliaMath/QuadGK.jl: adaptive 1d numerical Gauss\u2013Kronrod integration in Julia")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaMath/HCubature.jl"},"JuliaMath/HCubature.jl: pure-Julia multidimensional h-adaptive integration")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaMath/Cubature.jl"},"JuliaMath/Cubature.jl: One- and multi-dimensional adaptive integration routines for the Julia language")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/giordano/Cuba.jl"},"giordano/Cuba.jl: Library for multidimensional numerical integration with four independent algorithms: Vegas, Suave, Divonne, and Cuhre.")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaApproximation/FastGaussQuadrature.jl"},"JuliaApproximation/FastGaussQuadrature.jl: Julia package for Gaussian quadrature")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaApproximation/ApproxFun.jl"},"JuliaApproximation/ApproxFun.jl: Julia package for function approximation")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/machakann/DoubleExponentialFormulas.jl"},"machakann/DoubleExponentialFormulas.jl: One-dimensional numerical integration using the double exponential formula")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaApproximation/SingularIntegralEquations.jl"},"JuliaApproximation/SingularIntegralEquations.jl: Julia package for solving singular integral equations")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaGNI/GeometricIntegrators.jl"},"JuliaGNI/GeometricIntegrators.jl: Geometric Numerical Integration in Julia")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/stochastics-uni-luebeck/LevyArea.jl"},"stochastics-uni-luebeck/LevyArea.jl: Iterated stochastic integrals in Julia.")),(0,i.kt)("h4",{id:"bayesian-methods"},(0,i.kt)("span",{id:"head15"},"Bayesian Methods")),(0,i.kt)("p",null,"Julia:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/ranjanan/MonteCarloIntegration.jl"},"ranjanan/MonteCarloIntegration.jl: A package for multi-dimensional integration using monte carlo methods")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/theogf/BayesianQuadrature.jl"},"theogf/BayesianQuadrature.jl: Is there anything we can't make Bayesian?")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/s-baumann/BayesianIntegral.jl"},"s-baumann/BayesianIntegral.jl: Bayesian Integration of functions")),(0,i.kt)("p",null,"python\uff1a"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://emukit.github.io/"},"Emukit | Emukit is a highly adaptable Python toolkit for enriching decision making under uncertainty.")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://probnum.readthedocs.io/en/latest/"},"ProbNum \u2014 probnum 0.1 documentation")),(0,i.kt)("h4",{id:"expectations-calculation"},(0,i.kt)("span",{id:"head16"},"Expectations calculation")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/QuantEcon/Expectations.jl"},"QuantEcon/Expectations.jl: Expectation operators for Distributions.jl objects")))}h.isMDXComponent=!0}}]);